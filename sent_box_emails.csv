Text
"Subject: TEST IMAP 1 ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-08 06:56:55-07:00 ### Body: HERE TESTING
"
"Subject: TEST EMAIL CHECKER ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-02 13:05:43-07:00 ### Body: :)
"
"Subject: Courtesy Due Date Reminder - Items Due In 3 Days ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-18 10:18:22-07:00 ### Body: [image: Edmonton Public Library] <https://epl.ca/>

January 18, 2024
Friendly Reminder: Item(s) due in 3 days

Hi Annie,

A friendly reminder that the following item(s) are due within three days.
If you've returned or renewed them, please ignore this email.

To renew log in to your account <https://epl.bibliocommons.com/user/login>
or call 780-496-7047.
*None of this is true* by *Jewell, Lisa*
ID: 31221376202235
Due Date: *01/21/2024*

Thank you for returning your items on time,
Edmonton Public Library
*PLEASE DO NOT REPLY TO THIS EMAIL AS IT DOES NOT ACCEPT MESSAGES.*
"
"Subject: Fwd: another email Ana ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-10 23:20:54-07:00 ### Body: ---------- Forwarded message ---------
From: Annie <it28pachecoanne@gmail.com>
Date: Wed, Jan 10, 2024 at 4:24=E2=80=AFPM
Subject: another email Ana
To: <itemilianosanchez@gmail.com>


Subject: neon retreat ho ho ho , we ' re around to that most wonderful time
of the year - - - neon leaders retreat time ! i know that this time of year
is extremely hectic , and that it ' s tough to think about anything past
the holidays , but life does go on past the week of december 25 through
january 1 , and that ' s what i ' d like you to think about for a minute .
on the calender that i handed out at the beginning of the fall semester ,
the retreat was scheduled for the weekend of january 5 - 6 . but because of
a youth ministers conference that brad and dustin are connected with that
week , we ' re going to change the date to the following weekend , january
12 - 13 . now comes the part you need to think about . i think we all agree
that it ' s important for us to get together and have some time to recharge
our batteries before we get to far into the spring semester , but it can be
a lot of trouble and difficult for us to get away without kids , etc . so ,
brad came up with a potential alternative for how we can get together on
that weekend , and then you can let me know which you prefer . the first
option would be to have a retreat similar to what we ' ve done the past
several years . this year we could go to the heartland country inn ( www .
. com ) outside of brenham . it ' s a nice place , where we ' d have a 13 -
bedroom and a 5 - bedroom house side by side . it ' s in the country , real
relaxing , but also close to brenham and only about one hour and 15 minutes
from here . we can golf , shop in the antique and craft stores in brenham ,
eat dinner together at the ranch , and spend time with each other . we ' d
meet on saturday , and then return on sunday morning , just like what we '
ve done in the past . the second option would be to stay here in houston ,
have dinner together at a nice restaurant , and then have dessert and a
time for visiting and recharging at one of our homes on that saturday
evening . this might be easier , but the trade off would be that we wouldn
' t have as much time together . i ' ll let you decide . email me back with
what would be your preference , and of course if you ' re available on that
weekend . the democratic process will prevail - - majority vote will rule !
let me hear from you as soon as possible , preferably by the end of the
weekend . and if the vote doesn ' t go your way , no complaining allowed (
like i tend to do ! ) have a great weekend , great golf , great fishing ,
great shopping , or whatever makes you happy ! bobby
"
"Subject: another email Ana ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-10 16:24:35-07:00 ### Body:  Subject: neon retreat ho ho ho , we ' re around to that most wonderful
time of the year - - - neon leaders retreat time ! i know that this time of
year is extremely hectic , and that it ' s tough to think about anything
past the holidays , but life does go on past the week of december 25
through january 1 , and that ' s what i ' d like you to think about for a
minute . on the calender that i handed out at the beginning of the fall
semester , the retreat was scheduled for the weekend of january 5 - 6 . but
because of a youth ministers conference that brad and dustin are connected
with that week , we ' re going to change the date to the following weekend
, january 12 - 13 . now comes the part you need to think about . i think we
all agree that it ' s important for us to get together and have some time
to recharge our batteries before we get to far into the spring semester ,
but it can be a lot of trouble and difficult for us to get away without
kids , etc . so , brad came up with a potential alternative for how we can
get together on that weekend , and then you can let me know which you
prefer . the first option would be to have a retreat similar to what we '
ve done the past several years . this year we could go to the heartland
country inn ( www . . com ) outside of brenham . it ' s a nice place ,
where we ' d have a 13 - bedroom and a 5 - bedroom house side by side . it
' s in the country , real relaxing , but also close to brenham and only
about one hour and 15 minutes from here . we can golf , shop in the antique
and craft stores in brenham , eat dinner together at the ranch , and spend
time with each other . we ' d meet on saturday , and then return on sunday
morning , just like what we ' ve done in the past . the second option would
be to stay here in houston , have dinner together at a nice restaurant ,
and then have dessert and a time for visiting and recharging at one of our
homes on that saturday evening . this might be easier , but the trade off
would be that we wouldn ' t have as much time together . i ' ll let you
decide . email me back with what would be your preference , and of course
if you ' re available on that weekend . the democratic process will prevail
- - majority vote will rule ! let me hear from you as soon as possible ,
preferably by the end of the weekend . and if the vote doesn ' t go your
way , no complaining allowed ( like i tend to do ! ) have a great weekend ,
great golf , great fishing , great shopping , or whatever makes you happy !
bobby
"
"Subject: photoshop , windows , office . cheap ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-12 14:01:40-07:00 ### Body:  main trending abasements darer prudently fortuitous undergone lighthearted
charm orinoco taster railroad affluent pornographic cuvier irvin parkhouse
blameworthy chlorophyll robed diagrammatic fogarty clears bayda
inconveniencing managing represented smartness hashish academies
shareholders unload badness danielson pure caffein spaniard chargeable
levin
"
"Subject: neon retreat ho ho ho ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-12 11:29:18-07:00 ### Body: we ' re around to that most wonderful time of the year - - - neon leaders
retreat time ! i know that this time of year is extremely hectic , and that
it ' s tough to think about anything past the holidays , but life does go
on past the week of december 25 through january 1 , and that ' s what i ' d
like you to think about for a minute . on the calender that i handed out at
the beginning of the fall semester , the retreat was scheduled for the
weekend of january 5 - 6 . but because of a youth ministers conference that
brad and dustin are connected with that week , we ' re going to change the
date to the following weekend , january 12 - 13 . now comes the part you
need to think about . i think we all agree that it ' s important for us to
get together and have some time to recharge our batteries before we get to
far into the spring semester , but it can be a lot of trouble and difficult
for us to get away without kids , etc . so , brad came up with a potential
alternative for how we can get together on that weekend , and then you can
let me know which you prefer . the first option would be to have a retreat
similar to what we ' ve done the past several years . this year we could go
to the heartland country inn ( www . . com ) outside of brenham . it ' s a
nice place , where we ' d have a 13 - bedroom and a 5 - bedroom house side
by side . it ' s in the country , real relaxing , but also close to brenham
and only about one hour and 15 minutes from here . we can golf , shop in
the antique and craft stores in brenham , eat dinner together at the ranch
, and spend time with each other . we ' d meet on saturday , and then
return on sunday morning , just like what we ' ve done in the past . the
second option would be to stay here in houston , have dinner together at a
nice restaurant , and then have dessert and a time for visiting and
recharging at one of our homes on that saturday evening . this might be
easier , but the trade off would be that we wouldn ' t have as much time
together . i ' ll let you decide . email me back with what would be your
preference , and of course if you ' re available on that weekend . the
democratic process will prevail - - majority vote will rule ! let me hear
from you as soon as possible , preferably by the end of the weekend . and
if the vote doesn ' t go your way , no complaining allowed ( like i tend to
do ! ) have a great weekend , great golf , great fishing , great shopping ,
or whatever makes you happy ! bobby
"
"Subject: Re: kwaii ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-03 11:46:48-07:00 ### Body: https://www.youtube.com/watch?v=3D4iMZUhkpWAc

On Wed, Jan 3, 2024 at 11:46=E2=80=AFAM Annie <it28pachecoanne@gmail.com> w=
rote:

> """"""Views for Email IMAP API""""""
> from rest_framework import status
> from rest_framework.response import Response
> from rest_framework.views import APIView
> from core.models import EmailCredentials
> from imap.api.serializers import EmailCredentialsSerializer
> from imap.imap_handler import ImapEmailHandler
>
> class EmailCredentialsView(APIView):
>     """"""Email Credentials View""""""
>
>     def post(self, request, *args, **kwargs):
>         serializer =3D EmailCredentialsSerializer(data=3Drequest.data)
>
>         if serializer.is_valid():
>
>             email =3D serializer.validated_data['email']
>             password =3D serializer.validated_data['password']
>             imap_url =3D serializer.validated_data['imap_url']
>             keyword =3D serializer.validated_data['keyword']
>
>             try:
>                 email_manager =3D ImapEmailHandler(email, password, imap_=
url
> )
>                 mail_id_list =3D email_manager.search_emails(keyword, ema=
il)
>                 msgs =3D email_manager.fetch_emails(mail_id_list)
>                 unseen_emails =3D email_manager.filter_emails(msgs,
> 'no-reply')
>                 #email_manager.save_to_csv(msgs)
>
>                 return Response(unseen_emails, status=3Dstatus.HTTP_200_O=
K)
>             except Exception as e:
>                 return Response({'error': str(e)}, status=3D
> status.HTTP_500_INTERNAL_SERVER_ERROR)
>
>         return Response(serializer.errors, status=3D
> status.HTTP_400_BAD_REQUEST)
>
>
>
> On Wed, Jan 3, 2024 at 11:45=E2=80=AFAM Annie <it28pachecoanne@gmail.com>=
 wrote:
>
>> from imaplib import IMAP4_SSL
>> import email
>>
>>
>> import csv
>> from email import message_from_bytes
>> from email.header import decode_header
>> from io import BytesIO
>>
>>
>> class ImapEmailHandler:
>>     def __init__(
>>             self,
>>             user,
>>             password,
>>             imap_url=3D'imap.gmail.com'
>>         ) -> None:
>>         self.user =3D user
>>         self.password =3D password
>>         self.imap_url =3D imap_url
>>         self.mail =3D IMAP4_SSL(imap_url)
>>         self.mail.login(user, password)
>>         self.mail.select('Inbox')
>>
>>     def search_emails(self, key, value):
>>         _, data =3D self.mail.search(None, key, value)
>>         mail_id_list =3D data[0].split()
>>         return mail_id_list
>>
>>     def fetch_emails(self, mail_id_list):
>>         msgs =3D []
>>         for num in mail_id_list:
>>             typ, data =3D self.mail.fetch(num, '(RFC822)')
>>             msgs.append(data)
>>         return msgs
>>
>>     def filter_emails(self, msgs, keyword):
>>         """"""
>>         Filter emails by keyword
>>         Args:
>>             msgs (list): list of emails
>>             keyword (str): keyword to filter emails
>>         """"""
>>         filtered_emails =3D []
>>         for msg_data in msgs:
>>             msg_bytes =3D msg_data[0][1]
>>             msg =3D message_from_bytes(msg_bytes)
>>             if keyword in msg['From'] or keyword in msg['Body']:
>>                 filtered_emails.append(msg)
>>         return filtered_emails
>>
>>
>>     def save_to_csv(self, msgs, csv_filename=3D'emails.csv'):
>>         with open(csv_filename, 'w', newline=3D'', encoding=3D'utf-8') a=
s
>> csvfile:
>>             csv_writer =3D csv.writer(csvfile)
>>             csv_writer.writerow(['Subject', 'From', 'Date', 'Body'])
>>
>>             for msg_data in msgs:
>>                 msg_bytes =3D msg_data[0][1]
>>                 msg =3D message_from_bytes(msg_bytes)
>>
>>                 subject, encoding =3D decode_header(msg.get('Subject', '=
No
>> Subject'))[0]
>>                 if isinstance(subject, bytes):
>>                     subject =3D subject.decode(encoding or 'utf-8')
>>
>>                 sender, encoding =3D decode_header(msg.get('From', 'No
>> Sender'))[0]
>>                 if isinstance(sender, bytes):
>>                     sender =3D sender.decode(encoding or 'utf-8')
>>
>>                 date =3D msg.get('Date', 'No Date')
>>
>>                 body =3D 'No Body'
>>                 if msg.is_multipart():
>>                     for part in msg.walk():
>>                         if part.get_content_type() =3D=3D 'text/plain':
>>                             body =3D part.get_payload(decode=3DTrue).dec=
ode(
>> part.get_content_charset() or 'utf-8')
>>                             break
>>                 else:
>>                     body =3D msg.get_payload(decode=3DTrue).decode(msg.
>> get_content_charset() or 'utf-8')
>>
>>                 csv_writer.writerow([subject, sender, date, body])
>>
>>         print(f'Data saved to {csv_filename}')
>>
>> On Wed, Jan 3, 2024 at 11:45=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>>
>>> ImapHandler
>>>
>>>
>>> # -*- coding: utf-8 -*-
>>> """"""
>>> Created on Thu Dec 28 09:58:20 2023
>>>
>>> @author: ana_j
>>> """"""
>>>
>>> import time
>>> from itertools import chain
>>> import email
>>> import imaplib
>>> import base64
>>> import os
>>> import re
>>> import yaml
>>>
>>>
>>> with open(""credentials.yml"") as f:
>>>     content =3D f.read()
>>>
>>> my_credentials =3D yaml.load(content,Loader=3Dyaml.FullLoader)
>>> user, password =3D my_credentials[""user""], my_credentials[""password""]
>>>
>>> imap_url =3D 'imap.gmail.com'
>>>
>>> imap_port =3D 993
>>>
>>> uid_max =3D 0
>>>
>>> filters =3D {}
>>>
>>> my_mail =3D imaplib.IMAP4_SSL(imap_url)
>>> my_mail.login(user,password)
>>> my_mail.select('Inbox')
>>>
>>> def search_string(uid_max,filters):
>>>     c =3D list(map(lambda t: (t[0], '""'+str(t[1])+'""'), filters.items()=
))
>>> + [('UID', '%d:*' % (uid_max+1))]
>>>     return '(%s)' % ' '.join(chain(*c))
>>>
>>> result, data =3D my_mail.uid('SEARCH',None, search_string(uid_max,filte=
rs))
>>> print(f'Fetch response for message {result}')
>>> print(f'Raw email data:\n{data[0][1]}')
>>>
>>> my_mail_uid_list =3D [int(s) for s in data[0].split()]
>>> if my_mail_uid_list:
>>>     uid_max =3D max(my_mail_uid_list)
>>>     print(uid_max)
>>> my_mail.logout()
>>>
>>> # new_emails =3D []
>>>
>>> while 1:
>>>     my_mail =3D imaplib.IMAP4_SSL(imap_url)
>>>     my_mail.login(user, password)
>>>     my_mail.select('Inbox')
>>>     result, data =3D my_mail.uid('SEARCH',None,
>>> search_string(uid_max,filters))
>>>     my_mail_uid_list =3D [int(s) for s in data[0].split()]
>>>
>>>     for uid in my_mail_uid_list:
>>>         # Have to check again because Gmail sometimes does not obey UID
>>> criterion.
>>>         if uid > uid_max:
>>>                 result, data =3D my_mail.uid('fetch', str(uid), '(RFC82=
2)')
>>>
>>>                 # new_emails.append(data)
>>>                 for response_part in data:
>>>                     if isinstance(response_part, tuple):
>>>
>>>                         print(email.message_from_bytes(response_part[1]=
))
>>>                 uid_max =3D uid
>>>
>>
"
"Subject: Re: kwaii ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-03 11:46:06-07:00 ### Body:  """"""Views for Email IMAP API""""""
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from core.models import EmailCredentials
from imap.api.serializers import EmailCredentialsSerializer
from imap.imap_handler import ImapEmailHandler

class EmailCredentialsView(APIView):
    """"""Email Credentials View""""""

    def post(self, request, *args, **kwargs):
        serializer =3D EmailCredentialsSerializer(data=3Drequest.data)

        if serializer.is_valid():

            email =3D serializer.validated_data['email']
            password =3D serializer.validated_data['password']
            imap_url =3D serializer.validated_data['imap_url']
            keyword =3D serializer.validated_data['keyword']

            try:
                email_manager =3D ImapEmailHandler(email, password, imap_ur=
l)
                mail_id_list =3D email_manager.search_emails(keyword, email=
)
                msgs =3D email_manager.fetch_emails(mail_id_list)
                unseen_emails =3D email_manager.filter_emails(msgs, 'no-rep=
ly'
)
                #email_manager.save_to_csv(msgs)

                return Response(unseen_emails, status=3Dstatus.HTTP_200_OK)
            except Exception as e:
                return Response({'error': str(e)}, status=3D
status.HTTP_500_INTERNAL_SERVER_ERROR)

        return Response(serializer.errors, status=3D
status.HTTP_400_BAD_REQUEST)



On Wed, Jan 3, 2024 at 11:45=E2=80=AFAM Annie <it28pachecoanne@gmail.com> w=
rote:

> from imaplib import IMAP4_SSL
> import email
>
>
> import csv
> from email import message_from_bytes
> from email.header import decode_header
> from io import BytesIO
>
>
> class ImapEmailHandler:
>     def __init__(
>             self,
>             user,
>             password,
>             imap_url=3D'imap.gmail.com'
>         ) -> None:
>         self.user =3D user
>         self.password =3D password
>         self.imap_url =3D imap_url
>         self.mail =3D IMAP4_SSL(imap_url)
>         self.mail.login(user, password)
>         self.mail.select('Inbox')
>
>     def search_emails(self, key, value):
>         _, data =3D self.mail.search(None, key, value)
>         mail_id_list =3D data[0].split()
>         return mail_id_list
>
>     def fetch_emails(self, mail_id_list):
>         msgs =3D []
>         for num in mail_id_list:
>             typ, data =3D self.mail.fetch(num, '(RFC822)')
>             msgs.append(data)
>         return msgs
>
>     def filter_emails(self, msgs, keyword):
>         """"""
>         Filter emails by keyword
>         Args:
>             msgs (list): list of emails
>             keyword (str): keyword to filter emails
>         """"""
>         filtered_emails =3D []
>         for msg_data in msgs:
>             msg_bytes =3D msg_data[0][1]
>             msg =3D message_from_bytes(msg_bytes)
>             if keyword in msg['From'] or keyword in msg['Body']:
>                 filtered_emails.append(msg)
>         return filtered_emails
>
>
>     def save_to_csv(self, msgs, csv_filename=3D'emails.csv'):
>         with open(csv_filename, 'w', newline=3D'', encoding=3D'utf-8') as
> csvfile:
>             csv_writer =3D csv.writer(csvfile)
>             csv_writer.writerow(['Subject', 'From', 'Date', 'Body'])
>
>             for msg_data in msgs:
>                 msg_bytes =3D msg_data[0][1]
>                 msg =3D message_from_bytes(msg_bytes)
>
>                 subject, encoding =3D decode_header(msg.get('Subject', 'N=
o
> Subject'))[0]
>                 if isinstance(subject, bytes):
>                     subject =3D subject.decode(encoding or 'utf-8')
>
>                 sender, encoding =3D decode_header(msg.get('From', 'No
> Sender'))[0]
>                 if isinstance(sender, bytes):
>                     sender =3D sender.decode(encoding or 'utf-8')
>
>                 date =3D msg.get('Date', 'No Date')
>
>                 body =3D 'No Body'
>                 if msg.is_multipart():
>                     for part in msg.walk():
>                         if part.get_content_type() =3D=3D 'text/plain':
>                             body =3D part.get_payload(decode=3DTrue).deco=
de(
> part.get_content_charset() or 'utf-8')
>                             break
>                 else:
>                     body =3D msg.get_payload(decode=3DTrue).decode(msg.
> get_content_charset() or 'utf-8')
>
>                 csv_writer.writerow([subject, sender, date, body])
>
>         print(f'Data saved to {csv_filename}')
>
> On Wed, Jan 3, 2024 at 11:45=E2=80=AFAM Annie <it28pachecoanne@gmail.com>=
 wrote:
>
>> ImapHandler
>>
>>
>> # -*- coding: utf-8 -*-
>> """"""
>> Created on Thu Dec 28 09:58:20 2023
>>
>> @author: ana_j
>> """"""
>>
>> import time
>> from itertools import chain
>> import email
>> import imaplib
>> import base64
>> import os
>> import re
>> import yaml
>>
>>
>> with open(""credentials.yml"") as f:
>>     content =3D f.read()
>>
>> my_credentials =3D yaml.load(content,Loader=3Dyaml.FullLoader)
>> user, password =3D my_credentials[""user""], my_credentials[""password""]
>>
>> imap_url =3D 'imap.gmail.com'
>>
>> imap_port =3D 993
>>
>> uid_max =3D 0
>>
>> filters =3D {}
>>
>> my_mail =3D imaplib.IMAP4_SSL(imap_url)
>> my_mail.login(user,password)
>> my_mail.select('Inbox')
>>
>> def search_string(uid_max,filters):
>>     c =3D list(map(lambda t: (t[0], '""'+str(t[1])+'""'), filters.items())=
) +
>> [('UID', '%d:*' % (uid_max+1))]
>>     return '(%s)' % ' '.join(chain(*c))
>>
>> result, data =3D my_mail.uid('SEARCH',None, search_string(uid_max,filter=
s))
>> print(f'Fetch response for message {result}')
>> print(f'Raw email data:\n{data[0][1]}')
>>
>> my_mail_uid_list =3D [int(s) for s in data[0].split()]
>> if my_mail_uid_list:
>>     uid_max =3D max(my_mail_uid_list)
>>     print(uid_max)
>> my_mail.logout()
>>
>> # new_emails =3D []
>>
>> while 1:
>>     my_mail =3D imaplib.IMAP4_SSL(imap_url)
>>     my_mail.login(user, password)
>>     my_mail.select('Inbox')
>>     result, data =3D my_mail.uid('SEARCH',None,
>> search_string(uid_max,filters))
>>     my_mail_uid_list =3D [int(s) for s in data[0].split()]
>>
>>     for uid in my_mail_uid_list:
>>         # Have to check again because Gmail sometimes does not obey UID
>> criterion.
>>         if uid > uid_max:
>>                 result, data =3D my_mail.uid('fetch', str(uid), '(RFC822=
)')
>>
>>                 # new_emails.append(data)
>>                 for response_part in data:
>>                     if isinstance(response_part, tuple):
>>
>>                         print(email.message_from_bytes(response_part[1])=
)
>>                 uid_max =3D uid
>>
>
"
"Subject: Re: kwaii ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-03 11:45:47-07:00 ### Body:  from imaplib import IMAP4_SSL
import email


import csv
from email import message_from_bytes
from email.header import decode_header
from io import BytesIO


class ImapEmailHandler:
    def __init__(
            self,
            user,
            password,
            imap_url=3D'imap.gmail.com'
        ) -> None:
        self.user =3D user
        self.password =3D password
        self.imap_url =3D imap_url
        self.mail =3D IMAP4_SSL(imap_url)
        self.mail.login(user, password)
        self.mail.select('Inbox')

    def search_emails(self, key, value):
        _, data =3D self.mail.search(None, key, value)
        mail_id_list =3D data[0].split()
        return mail_id_list

    def fetch_emails(self, mail_id_list):
        msgs =3D []
        for num in mail_id_list:
            typ, data =3D self.mail.fetch(num, '(RFC822)')
            msgs.append(data)
        return msgs

    def filter_emails(self, msgs, keyword):
        """"""
        Filter emails by keyword
        Args:
            msgs (list): list of emails
            keyword (str): keyword to filter emails
        """"""
        filtered_emails =3D []
        for msg_data in msgs:
            msg_bytes =3D msg_data[0][1]
            msg =3D message_from_bytes(msg_bytes)
            if keyword in msg['From'] or keyword in msg['Body']:
                filtered_emails.append(msg)
        return filtered_emails


    def save_to_csv(self, msgs, csv_filename=3D'emails.csv'):
        with open(csv_filename, 'w', newline=3D'', encoding=3D'utf-8') as
csvfile:
            csv_writer =3D csv.writer(csvfile)
            csv_writer.writerow(['Subject', 'From', 'Date', 'Body'])

            for msg_data in msgs:
                msg_bytes =3D msg_data[0][1]
                msg =3D message_from_bytes(msg_bytes)

                subject, encoding =3D decode_header(msg.get('Subject', 'No
Subject'))[0]
                if isinstance(subject, bytes):
                    subject =3D subject.decode(encoding or 'utf-8')

                sender, encoding =3D decode_header(msg.get('From', 'No Send=
er'
))[0]
                if isinstance(sender, bytes):
                    sender =3D sender.decode(encoding or 'utf-8')

                date =3D msg.get('Date', 'No Date')

                body =3D 'No Body'
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() =3D=3D 'text/plain':
                            body =3D part.get_payload(decode=3DTrue).decode=
(part
.get_content_charset() or 'utf-8')
                            break
                else:
                    body =3D msg.get_payload(decode=3DTrue).decode(msg.
get_content_charset() or 'utf-8')

                csv_writer.writerow([subject, sender, date, body])

        print(f'Data saved to {csv_filename}')

On Wed, Jan 3, 2024 at 11:45=E2=80=AFAM Annie <it28pachecoanne@gmail.com> w=
rote:

> ImapHandler
>
>
> # -*- coding: utf-8 -*-
> """"""
> Created on Thu Dec 28 09:58:20 2023
>
> @author: ana_j
> """"""
>
> import time
> from itertools import chain
> import email
> import imaplib
> import base64
> import os
> import re
> import yaml
>
>
> with open(""credentials.yml"") as f:
>     content =3D f.read()
>
> my_credentials =3D yaml.load(content,Loader=3Dyaml.FullLoader)
> user, password =3D my_credentials[""user""], my_credentials[""password""]
>
> imap_url =3D 'imap.gmail.com'
>
> imap_port =3D 993
>
> uid_max =3D 0
>
> filters =3D {}
>
> my_mail =3D imaplib.IMAP4_SSL(imap_url)
> my_mail.login(user,password)
> my_mail.select('Inbox')
>
> def search_string(uid_max,filters):
>     c =3D list(map(lambda t: (t[0], '""'+str(t[1])+'""'), filters.items()))=
 +
> [('UID', '%d:*' % (uid_max+1))]
>     return '(%s)' % ' '.join(chain(*c))
>
> result, data =3D my_mail.uid('SEARCH',None, search_string(uid_max,filters=
))
> print(f'Fetch response for message {result}')
> print(f'Raw email data:\n{data[0][1]}')
>
> my_mail_uid_list =3D [int(s) for s in data[0].split()]
> if my_mail_uid_list:
>     uid_max =3D max(my_mail_uid_list)
>     print(uid_max)
> my_mail.logout()
>
> # new_emails =3D []
>
> while 1:
>     my_mail =3D imaplib.IMAP4_SSL(imap_url)
>     my_mail.login(user, password)
>     my_mail.select('Inbox')
>     result, data =3D my_mail.uid('SEARCH',None,
> search_string(uid_max,filters))
>     my_mail_uid_list =3D [int(s) for s in data[0].split()]
>
>     for uid in my_mail_uid_list:
>         # Have to check again because Gmail sometimes does not obey UID
> criterion.
>         if uid > uid_max:
>                 result, data =3D my_mail.uid('fetch', str(uid), '(RFC822)=
')
>
>                 # new_emails.append(data)
>                 for response_part in data:
>                     if isinstance(response_part, tuple):
>
>                         print(email.message_from_bytes(response_part[1]))
>                 uid_max =3D uid
>
"
"Subject: kwaii ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-03 11:45:17-07:00 ### Body: ImapHandler


# -*- coding: utf-8 -*-
""""""
Created on Thu Dec 28 09:58:20 2023

@author: ana_j
""""""

import time
from itertools import chain
import email
import imaplib
import base64
import os
import re
import yaml


with open(""credentials.yml"") as f:
    content = f.read()

my_credentials = yaml.load(content,Loader=yaml.FullLoader)
user, password = my_credentials[""user""], my_credentials[""password""]

imap_url = 'imap.gmail.com'

imap_port = 993

uid_max = 0

filters = {}

my_mail = imaplib.IMAP4_SSL(imap_url)
my_mail.login(user,password)
my_mail.select('Inbox')

def search_string(uid_max,filters):
    c = list(map(lambda t: (t[0], '""'+str(t[1])+'""'), filters.items())) +
[('UID', '%d:*' % (uid_max+1))]
    return '(%s)' % ' '.join(chain(*c))

result, data = my_mail.uid('SEARCH',None, search_string(uid_max,filters))
print(f'Fetch response for message {result}')
print(f'Raw email data:\n{data[0][1]}')

my_mail_uid_list = [int(s) for s in data[0].split()]
if my_mail_uid_list:
    uid_max = max(my_mail_uid_list)
    print(uid_max)
my_mail.logout()

# new_emails = []

while 1:
    my_mail = imaplib.IMAP4_SSL(imap_url)
    my_mail.login(user, password)
    my_mail.select('Inbox')
    result, data = my_mail.uid('SEARCH',None,
search_string(uid_max,filters))
    my_mail_uid_list = [int(s) for s in data[0].split()]

    for uid in my_mail_uid_list:
        # Have to check again because Gmail sometimes does not obey UID
criterion.
        if uid > uid_max:
                result, data = my_mail.uid('fetch', str(uid), '(RFC822)')

                # new_emails.append(data)
                for response_part in data:
                    if isinstance(response_part, tuple):
                        print(email.message_from_bytes(response_part[1]))
                uid_max = uid
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-02 12:20:46-07:00 ### Body: TEST5

On Tue, Jan 2, 2024 at 12:19=E2=80=AFPM Annie <it28pachecoanne@gmail.com> w=
rote:

> test4444444444444
>
> On Fri, Dec 29, 2023 at 10:44=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> test3
>>
>> On Thu, Dec 28, 2023 at 12:12=E2=80=AFPM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> NUEVOOO
>>>
>>> On Thu, Dec 28, 2023 at 12:11=E2=80=AFPM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> HEY ANNIE
>>>>
>>>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.=
com>
>>>> wrote:
>>>>
>>>>> hola back
>>>>>
>>>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail=
.com>
>>>>> wrote:
>>>>>
>>>>>> hola este es un nuevo email
>>>>>>
>>>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2024-01-02 12:19:17-07:00 ### Body: test4444444444444

On Fri, Dec 29, 2023 at 10:44=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> test3
>
> On Thu, Dec 28, 2023 at 12:12=E2=80=AFPM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> NUEVOOO
>>
>> On Thu, Dec 28, 2023 at 12:11=E2=80=AFPM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> HEY ANNIE
>>>
>>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> hola back
>>>>
>>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.=
com>
>>>> wrote:
>>>>
>>>>> hola este es un nuevo email
>>>>>
>>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-29 10:44:59-07:00 ### Body: test3

On Thu, Dec 28, 2023 at 12:12=E2=80=AFPM Annie <it28pachecoanne@gmail.com> =
wrote:

> NUEVOOO
>
> On Thu, Dec 28, 2023 at 12:11=E2=80=AFPM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> HEY ANNIE
>>
>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola back
>>>
>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> hola este es un nuevo email
>>>>
>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:12:15-07:00 ### Body: NUEVOOO

On Thu, Dec 28, 2023 at 12:11=E2=80=AFPM Annie <it28pachecoanne@gmail.com> =
wrote:

> HEY ANNIE
>
> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola back
>>
>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola este es un nuevo email
>>>
>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:11:54-07:00 ### Body: HEY ANNIE

On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> hola back
>
> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola este es un nuevo email
>>
>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:09:16-07:00 ### Body: PLAYYYYYYYYYYYYYY

On Thu, Dec 28, 2023 at 12:08=E2=80=AFPM Annie <it28pachecoanne@gmail.com> =
wrote:

> HEEEEEEEEY ANNNNNNNNIE
>
> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola back
>>
>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola este es un nuevo email
>>>
>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:08:43-07:00 ### Body: HEEEEEEEEY ANNNNNNNNIE

On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> hola back
>
> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola este es un nuevo email
>>
>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:07:46-07:00 ### Body: HEEEEEEY

On Thu, Dec 28, 2023 at 12:07=E2=80=AFPM Annie <it28pachecoanne@gmail.com> =
wrote:

> HOOOOOOOOOOOLA
>
> On Thu, Dec 28, 2023 at 12:04=E2=80=AFPM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> =F0=9F=98=80
>>
>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola back
>>>
>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> hola este es un nuevo email
>>>>
>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:07:12-07:00 ### Body: HOOOOOOOOOOOLA

On Thu, Dec 28, 2023 at 12:04=E2=80=AFPM Annie <it28pachecoanne@gmail.com> =
wrote:

> =F0=9F=98=80
>
> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola back
>>
>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola este es un nuevo email
>>>
>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:04:19-07:00 ### Body: =F0=9F=98=80

On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> hola back
>
> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola este es un nuevo email
>>
>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 12:03:33-07:00 ### Body: On Thu, Dec 28, 2023 at 11:59=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> GVGJVJHHJVHJVHJ
>
> On Thu, Dec 28, 2023 at 11:58=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> 1592369877777
>>
>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola back
>>>
>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> hola este es un nuevo email
>>>>
>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:59:29-07:00 ### Body: GVGJVJHHJVHJVHJ

On Thu, Dec 28, 2023 at 11:58=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> 1592369877777
>
> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola back
>>
>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola este es un nuevo email
>>>
>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:58:19-07:00 ### Body: 1592369877777

On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> hola back
>
> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola este es un nuevo email
>>
>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:57:20-07:00 ### Body: 1222222222

On Thu, Dec 28, 2023 at 11:53=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> ANA ANA
>
> On Thu, Dec 28, 2023 at 11:51=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> 123
>>
>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola back
>>>
>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> hola este es un nuevo email
>>>>
>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:56:39-07:00 ### Body: AQUI AQUI

On Thu, Dec 28, 2023 at 11:55=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> HEY HEY
>
> On Thu, Dec 28, 2023 at 11:53=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> ANA ANA
>>
>> On Thu, Dec 28, 2023 at 11:51=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> 123
>>>
>>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> hola back
>>>>
>>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.=
com>
>>>> wrote:
>>>>
>>>>> hola este es un nuevo email
>>>>>
>>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:55:48-07:00 ### Body: HEY HEY

On Thu, Dec 28, 2023 at 11:53=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> ANA ANA
>
> On Thu, Dec 28, 2023 at 11:51=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> 123
>>
>> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola back
>>>
>>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.c=
om>
>>> wrote:
>>>
>>>> hola este es un nuevo email
>>>>
>>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:53:08-07:00 ### Body: ANA ANA

On Thu, Dec 28, 2023 at 11:51=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> 123
>
> On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola back
>>
>> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.co=
m> wrote:
>>
>>> hola este es un nuevo email
>>>
>>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:51:44-07:00 ### Body: 123

On Thu, Dec 28, 2023 at 11:49=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> hola back
>
> On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.com=
> wrote:
>
>> hola este es un nuevo email
>>
>
"
"Subject: Re: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:49:04-07:00 ### Body: hola back

On Thu, Dec 28, 2023 at 11:47=E2=80=AFAM Annie <it28pachecoanne@gmail.com> =
wrote:

> hola este es un nuevo email
>
"
"Subject: nuevo email ### From: Annie <it28pachecoanne@gmail.com> ### Date: 2023-12-28 11:47:09-07:00 ### Body: hola este es un nuevo email
"
